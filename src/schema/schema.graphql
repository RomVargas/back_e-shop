"Obtener usuarios"
type Query{
    "Lista de usuarios registrados en la base clientes / Admin"
    users: ResultUsers
    "Login para iniciar sesion"
    login(email: String!, password: String!): ResultLogin
}

type Mutation {
    register(user: UserInput!): User!
}

"""
Inteface para especificar propiedades obligatorias de la respuesta
"""
interface Result {
    "Estado del operacion"
    status: Boolean!
    "mensaje dela operacion"
    message: String!
}

type ResultUsers implements Result {
    "Estado del operacion"
    status: Boolean!
    "mensaje dela operacion"
    message: String!
    "Lista de usuarios registrados en la base clientes / Admin"
    users: [User!]!
}

type ResultLogin implements Result {
    "Estado del operacion"
    status: Boolean!
    "mensaje dela operacion"
    message: String!
    "Lista de usuarios registrados en la base clientes / Admin"
    user: User
    "Informaciond el token del usuario logeado"
    token: String
}

"""
email = usuario de la base de datos
Fecha de nacimiento y registro en formato ISO
"""
type User {
    "Id de usuario"
    _id: ID!
    "identificador interno"
    id: Int!
    "Nombre de usuario"
    name: String!
    "apellido de Usuario"
    lastname: String!
    "email de usuario"
    email: String!
    "contrasena"
    password: String!
    "Fecha de registro"
    registerDate: String!
    "Fecha de nacimiento - solo usuarios de 18 anios"
    birthday: String!
    "Permisos del usuario"
    role: Role!
}

"Input para a√±adir los datos del usuario en el registro"
input UserInput {
    "Identificador no obligatorio"
    _id: ID
    "identificador interno"
    id: Int!
    "Nombre de usuario"
    name: String!
    "apellido de Usuario"
    lastname: String!
    "email de usuario"
    email: String!
    "contrasena"
    password: String!
    "Fecha de registro"
    registerDate: String
    "Fecha de nacimiento - solo usuarios de 18 anios"
    birthday: String!
    "Permisos del usuario"
    role: Role!=CLIENT
}


enum Role {
    CLIENT 
    ADMIN
}